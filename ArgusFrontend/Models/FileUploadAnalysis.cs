// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using FileAnalysis;
//
//    var fileUploadAnalysis = FileUploadAnalysis.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace FileAnalysis;
using System;
using System.Collections.Generic;

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;

    public partial class FileUploadAnalysis
    {
        [JsonPropertyName("data")]
        public Data Data { get; set; }

        [JsonPropertyName("meta")]
        public Meta Meta { get; set; }
    }

    public partial class Data
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("links")]
        public Links Links { get; set; }

        [JsonPropertyName("attributes")]
        public Attributes Attributes { get; set; }
    }

    public partial class Attributes
    {
        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("stats")]
        public Stats Stats { get; set; }

        [JsonPropertyName("results")]
        public Dictionary<string, Result> Results { get; set; }

        [JsonPropertyName("date")]
        public long Date { get; set; }
    }

    public partial class Result
    {
        [JsonPropertyName("method")]
        public string Method { get; set; }

        [JsonPropertyName("engine_name")]
        public string EngineName { get; set; }

        [JsonPropertyName("engine_version")]
        public string EngineVersion { get; set; }

        [JsonPropertyName("engine_update")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EngineUpdate { get; set; }

        [JsonPropertyName("category")]
        public string Category { get; set; }

        [JsonPropertyName("result")]
        public object ResultResult { get; set; }
    }

    public partial class Stats
    {
        [JsonPropertyName("malicious")]
        public long Malicious { get; set; }

        [JsonPropertyName("suspicious")]
        public long Suspicious { get; set; }

        [JsonPropertyName("undetected")]
        public long Undetected { get; set; }

        [JsonPropertyName("harmless")]
        public long Harmless { get; set; }

        [JsonPropertyName("timeout")]
        public long Timeout { get; set; }

        [JsonPropertyName("confirmed-timeout")]
        public long ConfirmedTimeout { get; set; }

        [JsonPropertyName("failure")]
        public long Failure { get; set; }

        [JsonPropertyName("type-unsupported")]
        public long TypeUnsupported { get; set; }
    }

    public partial class Links
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("item")]
        public Uri Item { get; set; }
    }

    public partial class Meta
    {
        [JsonPropertyName("file_info")]
        public FileInfo FileInfo { get; set; }
    }

    public partial class FileInfo
    {
        [JsonPropertyName("sha256")]
        public string Sha256 { get; set; }

        [JsonPropertyName("md5")]
        public string Md5 { get; set; }

        [JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }
    }

    public enum Category { Failure, Timeout, TypeUnsupported, Undetected };

    public enum Method { Blacklist };

    public partial class FileUploadAnalysis
    {
        public static FileUploadAnalysis FromJson(string json) => JsonSerializer.Deserialize<FileUploadAnalysis>(json, FileAnalysis.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this FileUploadAnalysis self) => JsonSerializer.Serialize(self, FileAnalysis.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                CategoryConverter.Singleton,
                MethodConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class CategoryConverter : JsonConverter<Category>
    {
        public override bool CanConvert(Type t) => t == typeof(Category);

        public override Category Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "failure":
                    return Category.Failure;
                case "timeout":
                    return Category.Timeout;
                case "type-unsupported":
                    return Category.TypeUnsupported;
                case "undetected":
                    return Category.Undetected;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void Write(Utf8JsonWriter writer, Category value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Category.Failure:
                    JsonSerializer.Serialize(writer, "failure", options);
                    return;
                case Category.Timeout:
                    JsonSerializer.Serialize(writer, "timeout", options);
                    return;
                case Category.TypeUnsupported:
                    JsonSerializer.Serialize(writer, "type-unsupported", options);
                    return;
                case Category.Undetected:
                    JsonSerializer.Serialize(writer, "undetected", options);
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class MethodConverter : JsonConverter<Method>
    {
        public override bool CanConvert(Type t) => t == typeof(Method);

        public override Method Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "blacklist")
            {
                return Method.Blacklist;
            }
            throw new Exception("Cannot unmarshal type Method");
        }

        public override void Write(Utf8JsonWriter writer, Method value, JsonSerializerOptions options)
        {
            if (value == Method.Blacklist)
            {
                JsonSerializer.Serialize(writer, "blacklist", options);
                return;
            }
            throw new Exception("Cannot marshal type Method");
        }

        public static readonly MethodConverter Singleton = new MethodConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                    || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }

#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
