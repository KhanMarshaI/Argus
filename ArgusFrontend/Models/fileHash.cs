// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using fileHash;
//
//    var hash = Hash.FromJson(jsonString);

namespace fileHash
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Hash
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("links")]
        public Links Links { get; set; }

        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("sha1")]
        public string Sha1 { get; set; }

        [JsonProperty("crowdsourced_yara_results")]
        public CrowdsourcedYaraResult[] CrowdsourcedYaraResults { get; set; }

        [JsonProperty("last_modification_date")]
        public long LastModificationDate { get; set; }

        [JsonProperty("trid")]
        public Trid[] Trid { get; set; }

        [JsonProperty("first_seen_itw_date")]
        public long FirstSeenItwDate { get; set; }

        [JsonProperty("sha256")]
        public string Sha256 { get; set; }

        [JsonProperty("unique_sources")]
        public long UniqueSources { get; set; }

        [JsonProperty("last_analysis_results")]
        public Dictionary<string, LastAnalysisResult> LastAnalysisResults { get; set; }

        [JsonProperty("magic")]
        public string Magic { get; set; }

        [JsonProperty("type_description")]
        public string TypeDescription { get; set; }

        [JsonProperty("magika")]
        public string Magika { get; set; }

        [JsonProperty("times_submitted")]
        public long TimesSubmitted { get; set; }

        [JsonProperty("meaningful_name")]
        public string MeaningfulName { get; set; }

        [JsonProperty("first_submission_date")]
        public long FirstSubmissionDate { get; set; }

        [JsonProperty("last_analysis_date")]
        public long LastAnalysisDate { get; set; }

        [JsonProperty("popular_threat_classification")]
        public PopularThreatClassification PopularThreatClassification { get; set; }

        [JsonProperty("creation_date")]
        public long CreationDate { get; set; }

        [JsonProperty("total_votes")]
        public TotalVotes TotalVotes { get; set; }

        [JsonProperty("last_submission_date")]
        public long LastSubmissionDate { get; set; }

        [JsonProperty("last_analysis_stats")]
        public LastAnalysisStats LastAnalysisStats { get; set; }

        [JsonProperty("type_extension")]
        public string TypeExtension { get; set; }

        [JsonProperty("names")]
        public string[] Names { get; set; }

        [JsonProperty("vhash")]
        public string Vhash { get; set; }

        [JsonProperty("authentihash")]
        public string Authentihash { get; set; }

        [JsonProperty("ssdeep")]
        public string Ssdeep { get; set; }

        [JsonProperty("detectiteasy")]
        public Detectiteasy Detectiteasy { get; set; }

        [JsonProperty("type_tag")]
        public string TypeTag { get; set; }

        [JsonProperty("tlsh")]
        public string Tlsh { get; set; }

        [JsonProperty("signature_info")]
        public SignatureInfo SignatureInfo { get; set; }

        [JsonProperty("sandbox_verdicts")]
        public SandboxVerdicts SandboxVerdicts { get; set; }

        [JsonProperty("reputation")]
        public long Reputation { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("md5")]
        public string Md5 { get; set; }

        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("type_tags")]
        public string[] TypeTags { get; set; }

        [JsonProperty("pe_info")]
        public PeInfo PeInfo { get; set; }
    }

    public partial class CrowdsourcedYaraResult
    {
        [JsonProperty("ruleset_id")]
        public string RulesetId { get; set; }

        [JsonProperty("rule_name")]
        public string RuleName { get; set; }

        [JsonProperty("ruleset_name")]
        public string RulesetName { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("match_date", NullValueHandling = NullValueHandling.Ignore)]
        public long? MatchDate { get; set; }

        [JsonProperty("source")]
        public Uri Source { get; set; }

        [JsonProperty("match_in_subfile", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MatchInSubfile { get; set; }
    }

    public partial class Detectiteasy
    {
        [JsonProperty("filetype")]
        public string Filetype { get; set; }

        [JsonProperty("values")]
        public Value[] Values { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("info", NullValueHandling = NullValueHandling.Ignore)]
        public string Info { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class LastAnalysisResult
    {
        [JsonProperty("method")]
        public Method Method { get; set; }

        [JsonProperty("engine_name")]
        public string EngineName { get; set; }

        [JsonProperty("engine_version")]
        public string EngineVersion { get; set; }

        [JsonProperty("engine_update")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EngineUpdate { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("result")]
        public string Result { get; set; }
    }

    public partial class LastAnalysisStats
    {
        [JsonProperty("malicious")]
        public long Malicious { get; set; }

        [JsonProperty("suspicious")]
        public long Suspicious { get; set; }

        [JsonProperty("undetected")]
        public long Undetected { get; set; }

        [JsonProperty("harmless")]
        public long Harmless { get; set; }

        [JsonProperty("timeout")]
        public long Timeout { get; set; }

        [JsonProperty("confirmed-timeout")]
        public long ConfirmedTimeout { get; set; }

        [JsonProperty("failure")]
        public long Failure { get; set; }

        [JsonProperty("type-unsupported")]
        public long TypeUnsupported { get; set; }
    }

    public partial class PeInfo
    {
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("imphash")]
        public string Imphash { get; set; }

        [JsonProperty("machine_type")]
        public long MachineType { get; set; }

        [JsonProperty("entry_point")]
        public long EntryPoint { get; set; }

        [JsonProperty("resource_details")]
        public ResourceDetail[] ResourceDetails { get; set; }

        [JsonProperty("resource_langs")]
        public ResourceLangs ResourceLangs { get; set; }

        [JsonProperty("resource_types")]
        public ResourceTypes ResourceTypes { get; set; }

        [JsonProperty("sections")]
        public Section[] Sections { get; set; }

        [JsonProperty("compiler_product_versions")]
        public string[] CompilerProductVersions { get; set; }

        [JsonProperty("rich_pe_header_hash")]
        public string RichPeHeaderHash { get; set; }

        [JsonProperty("import_list")]
        public ImportList[] ImportList { get; set; }
    }

    public partial class ImportList
    {
        [JsonProperty("library_name")]
        public string LibraryName { get; set; }

        [JsonProperty("imported_functions")]
        public string[] ImportedFunctions { get; set; }
    }

    public partial class ResourceDetail
    {
        [JsonProperty("lang")]
        public string Lang { get; set; }

        [JsonProperty("chi2")]
        public double Chi2 { get; set; }

        [JsonProperty("filetype")]
        public string Filetype { get; set; }

        [JsonProperty("entropy")]
        public double Entropy { get; set; }

        [JsonProperty("sha256")]
        public string Sha256 { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class ResourceLangs
    {
        [JsonProperty("ENGLISH US")]
        public long EnglishUs { get; set; }
    }

    public partial class ResourceTypes
    {
        [JsonProperty("RT_ICON")]
        public long RtIcon { get; set; }

        [JsonProperty("RT_VERSION")]
        public long RtVersion { get; set; }

        [JsonProperty("RT_GROUP_ICON")]
        public long RtGroupIcon { get; set; }
    }

    public partial class Section
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("chi2")]
        public double Chi2 { get; set; }

        [JsonProperty("virtual_address")]
        public long VirtualAddress { get; set; }

        [JsonProperty("entropy")]
        public double Entropy { get; set; }

        [JsonProperty("raw_size")]
        public long RawSize { get; set; }

        [JsonProperty("flags")]
        public string Flags { get; set; }

        [JsonProperty("virtual_size")]
        public long VirtualSize { get; set; }

        [JsonProperty("md5")]
        public string Md5 { get; set; }
    }

    public partial class PopularThreatClassification
    {
        [JsonProperty("popular_threat_category")]
        public PopularThreat[] PopularThreatCategory { get; set; }

        [JsonProperty("suggested_threat_label")]
        public string SuggestedThreatLabel { get; set; }

        [JsonProperty("popular_threat_name")]
        public PopularThreat[] PopularThreatName { get; set; }
    }

    public partial class PopularThreat
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class SandboxVerdicts
    {
        [JsonProperty("Zenbox")]
        public Box Zenbox { get; set; }

        [JsonProperty("CAPE Sandbox")]
        public Box CapeSandbox { get; set; }
    }

    public partial class Box
    {
        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("malware_classification")]
        public string[] MalwareClassification { get; set; }

        [JsonProperty("sandbox_name")]
        public string SandboxName { get; set; }

        [JsonProperty("malware_names")]
        public string[] MalwareNames { get; set; }

        [JsonProperty("confidence", NullValueHandling = NullValueHandling.Ignore)]
        public long? Confidence { get; set; }
    }

    public partial class SignatureInfo
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("file version")]
        public string FileVersion { get; set; }

        [JsonProperty("original name")]
        public string OriginalName { get; set; }

        [JsonProperty("product")]
        public string Product { get; set; }

        [JsonProperty("internal name")]
        public string InternalName { get; set; }

        [JsonProperty("copyright")]
        public string Copyright { get; set; }
    }

    public partial class TotalVotes
    {
        [JsonProperty("harmless")]
        public long Harmless { get; set; }

        [JsonProperty("malicious")]
        public long Malicious { get; set; }
    }

    public partial class Trid
    {
        [JsonProperty("file_type")]
        public string FileType { get; set; }

        [JsonProperty("probability")]
        public double Probability { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("self")]
        public Uri Self { get; set; }
    }

    public enum Category { Malicious, TypeUnsupported, Undetected };

    public enum Method { Blacklist };

    public partial class Hash
    {
        public static Hash FromJson(string json) => JsonConvert.DeserializeObject<Hash>(json, fileHash.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Hash self) => JsonConvert.SerializeObject(self, fileHash.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CategoryConverter.Singleton,
                MethodConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "malicious":
                    return Category.Malicious;
                case "type-unsupported":
                    return Category.TypeUnsupported;
                case "undetected":
                    return Category.Undetected;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category)untypedValue;
            switch (value)
            {
                case Category.Malicious:
                    serializer.Serialize(writer, "malicious");
                    return;
                case Category.TypeUnsupported:
                    serializer.Serialize(writer, "type-unsupported");
                    return;
                case Category.Undetected:
                    serializer.Serialize(writer, "undetected");
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class MethodConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Method) || t == typeof(Method?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "blacklist")
            {
                return Method.Blacklist;
            }
            throw new Exception("Cannot unmarshal type Method");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Method)untypedValue;
            if (value == Method.Blacklist)
            {
                serializer.Serialize(writer, "blacklist");
                return;
            }
            throw new Exception("Cannot marshal type Method");
        }

        public static readonly MethodConverter Singleton = new MethodConverter();
    }
}
