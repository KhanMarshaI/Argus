@page "/login"
@using ArgusFrontend.Services
@using ArgusFrontend.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication;
@inject NavigationManager Navigation


<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card p-4 shadow-lg rounded" style="max-width: 400px; width: 100%;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Login</h3>
            <EditForm Model="loginModel" OnValidSubmit="OnSubmit" formName="LoginForm" class="row g-3">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="col-12">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="loginModel.Username" class="form-control rounded-pill" />
                </div>

                <div class="col-12">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control rounded-pill" />
                </div>

                <div class="col-12 d-grid">
                    <button type="submit" class="btn btn-primary rounded-pill">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (errorMessage != null)
{
    <p>@errorMessage</p>
}

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    private string? errorMessage;
    private DatabaseService dbService = new DatabaseService();

    private async Task OnSubmit()
    {
        bool loginStatus = await dbService.AuthorizeUserAsync(loginModel.Username, loginModel.Password);

        if(!loginStatus)
        {
            errorMessage = "Invalid credentials";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, loginModel.Username)
            //we can also add a Role here to differentiate between users and admins
        };
        var identity = new ClaimsIdentity(claims, "CustomAuth");
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(principal);

        Navigation.NavigateTo("/");
    }

}