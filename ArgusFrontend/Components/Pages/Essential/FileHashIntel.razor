@page "/customintel/fileintel"
@using ArgusFrontend.Services
@using ArgusFrontend.Models
@rendermode InteractiveServer
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>Store File Intel</PageTitle>
<AuthorizeView>
	<Authorized>
       <div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
            <div class="card p-4 shadow-lg rounded" style="max-width: 900px; width: 100%;">
                <div class="card-body">
                <h3 class="card-title text-center mb-4">File Intel</h3>
		
            <EditForm Model="filehash" OnValidSubmit="FileHashSubmit" formName="CustomFileHashPost" class="row g-3" Context="FileHashContext">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">#</span>
                    <InputText type="text" class="form-control" placeholder="Hash" aria-label="FileID"
                               aria-describedby="basic-addon1" @bind-Value="filehash.Id" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-binary"></i></span>
                    <InputText type="text" class="form-control" placeholder="Type" aria-label="FileType"
                               aria-describedby="basic-addon1" @bind-Value="filehash.Type" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-text"></i></span>
                    <InputText type="text" class="form-control" placeholder="Extension" aria-label="FileExtension"
                               aria-describedby="basic-addon1" @bind-Value="filehash.Extension" />
                </div>

                <div class="card mt-3">
                    <div class="card-header">Signature Information</div>
                    <div class="card-body">
                        <div class="input-group mb-3">
                            <span class="input-group-text">Description</span>
                            <InputText type="text" class="form-control" placeholder="Description"
                                        aria-label="Description"
                                        @bind-Value="filehash.SignatureInfo.Description" />
                        </div>
                        <div class="input-group mb-3">
                            <span class="input-group-text">File Version</span>
                            <InputText type="text" class="form-control" placeholder="File Version"
                                        aria-label="FileVersion"
                                        @bind-Value="filehash.SignatureInfo.FileVersion" />
                        </div>
                        <div class="input-group mb-3">
                            <span class="input-group-text">Original Name</span>
                            <InputText type="text" class="form-control" placeholder="Original Name"
                                        aria-label="OriginalName"
                                        @bind-Value="filehash.SignatureInfo.OriginalName" />
                        </div>
                        <div class="input-group mb-3">
                            <span class="input-group-text">Product</span>
                            <InputText type="text" class="form-control" placeholder="Product"
                                        aria-label="Product"
                                        @bind-Value="filehash.SignatureInfo.Product" />
                        </div>
                        <div class="input-group mb-3">
                            <span class="input-group-text">Internal Name</span>
                            <InputText type="text" class="form-control" placeholder="Internal Name"
                                        aria-label="InternalName"
                                        @bind-Value="filehash.SignatureInfo.InternalName" />
                        </div>
                        <div class="input-group mb-3">
                            <span class="input-group-text">Copyright</span>
                            <InputText type="text" class="form-control" placeholder="Copyright"
                                        aria-label="Copyright"
                                        @bind-Value="filehash.SignatureInfo.Copyright" />
                        </div>
                    </div>
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-calendar3"></i></span>
                    <InputDate class="form-control" placeholder="Last Modification Date"
                                aria-label="LastModificationDate"
                                aria-describedby="basic-addon1" @bind-Value="filehash.LastModificationDate" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-magic"></i></span>
                    <InputText type="text" class="form-control" placeholder="Magic" aria-label="FileMagic"
                               aria-describedby="basic-addon1" @bind-Value="filehash.Magic" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">Reputation</span>
                    <InputNumber class="form-control" placeholder="Reputation" aria-label="Reputation"
                                 aria-describedby="basic-addon1" @bind-Value="filehash.Reputation" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">Malicious</span>
                    <InputNumber class="form-control" placeholder="Malicious" aria-label="MaliciousCount"
                                 aria-describedby="basic-addon1" @bind-Value="filehash.Malicious" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">Suspicious</span>
                    <InputNumber class="form-control" placeholder="Suspicious" aria-label="SuspiciousCount"
                                 aria-describedby="basic-addon1" @bind-Value="filehash.Suspicious" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">Harmless</span>
                    <InputNumber class="form-control" placeholder="Harmless" aria-label="HarmlessCount"
                                 aria-describedby="basic-addon1" @bind-Value="filehash.Harmless" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">Undetected</span>
                    <InputNumber class="form-control" placeholder="Undetected" aria-label="UndetectedCount"
                                 aria-describedby="basic-addon1" @bind-Value="filehash.Undetected" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-patch-question"></i></span>
                    <InputTextArea type="text" class="form-control" placeholder="Names" aria-label="FileNames"
                                   aria-describedby="basic-addon1" @bind-Value="filehash.Names" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-code"></i></span>
                    <InputText type="text" class="form-control" placeholder="MD5" aria-label="MD5Hash"
                               aria-describedby="basic-addon1" @bind-Value="filehash.MD5" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-code"></i></span>
                    <InputText type="text" class="form-control" placeholder="SHA1" aria-label="SHA1Hash"
                               aria-describedby="basic-addon1" @bind-Value="filehash.SHA1" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-code"></i></span>
                    <InputText type="text" class="form-control" placeholder="SHA256" aria-label="SHA256Hash"
                               aria-describedby="basic-addon1" @bind-Value="filehash.SHA256" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-code"></i></span>
                    <InputText type="text" class="form-control" placeholder="TLSH" aria-label="TLSHHash"
                               aria-describedby="basic-addon1" @bind-Value="filehash.TLSH" />
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-code"></i></span>
                    <InputText type="text" class="form-control" placeholder="VHash" aria-label="VHASH"
                               aria-describedby="basic-addon1" @bind-Value="filehash.VHASH" />
                </div>

                <div class="card mt-3">
                    <div class="card-header d-flex justify-content-between">
                        <span>Last Analysis Results</span>
                        <button type="button" class="btn btn-sm btn-success" @onclick="AddNewAnalysis">+ Add Analysis</button>
                    </div>
                    <div class="card-body">
                        @if (filehash.LastAnalysisResults?.Any() == true)
                        {
                            @foreach (var analysis in filehash.LastAnalysisResults)
                            {
                                <div class="border rounded p-3 mb-3">
                                    <div class="input-group mb-2">
                                        <span class="input-group-text">Engine Name</span>
                                        <InputText class="form-control" placeholder="Engine Name"
                                                    @bind-Value="analysis.Value.EngineName" />
                                    </div>
                                    <div class="input-group mb-2">
                                        <span class="input-group-text">Category</span>
                                        <InputText class="form-control" placeholder="Category"
                                                    @bind-Value="analysis.Value.Category" />
                                    </div>
                                    <div class="input-group mb-2">
                                        <span class="input-group-text">Result</span>
                                        <InputText class="form-control" placeholder="Result"
                                                    @bind-Value="analysis.Value.Result" />
                                    </div>
                                    <button type="button" class="btn btn-danger btn-sm mt-2"
                                            @onclick="() => RemoveAnalysis(analysis.Key)">
                                        Remove
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No analysis results added. Click "+ Add Analysis" to begin.</p>
                        }
                    </div>
                </div>

                <div class="col-12 d-grid">
                    <button type="submit" class="btn btn-primary rounded-pill">Save</button>
                </div>
            </EditForm>
                @if (fileErrorMessage != null)
                {
                    <br />
                    <div class="alert alert-danger" role="alert">
                        @fileErrorMessage
                    </div>
                }
                @if (fileSuccessMessage != null)
                {
                    <br />
                    <div class="alert alert-success" role="alert">
                        @fileSuccessMessage
                    </div>
                }
                    </div>
                </div>
            </div>
	</Authorized>
    <NotAuthorized>
        <div class="container text-center mt-5">
            <div class="card shadow-sm mx-auto" style="max-width: 400px; border-radius: 10px;">
                <div class="card-body">
                    <h1 class="display-4 text-danger"><i class="bi bi-shield-lock"></i></h1>
                    <h2 class="card-title text-dark">Access Denied</h2>
                    <p class="card-text text-muted">
                        You aren't logged in. Please log in to access this page.
                    </p>
                    <a href="/login" class="btn btn-primary btn-lg mt-3">
                        <i class="bi bi-box-arrow-in-right"></i> Login Now
                    </a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [SupplyParameterFromForm]
    private CustomFileHash filehash { get; set; } = new();

    private DatabaseService dbService = new DatabaseService();
    private string? fileErrorMessage;
    private string? fileSuccessMessage;
    private string? name;

    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        name = user.Identity.Name;
    }

    // Ensure LastAnalysisResults is always initialized.
    protected override void OnInitialized()
    {
        if (filehash.LastAnalysisResults == null)
        {
            filehash.LastAnalysisResults = new Dictionary<string, AnalysisResult>();
        }
    }

    private void AddNewAnalysis()
    {
        if (filehash.LastAnalysisResults == null)
        {
            filehash.LastAnalysisResults = new Dictionary<string, AnalysisResult>();
        }

        string newKey = Guid.NewGuid().ToString(); // Unique key for the dictionary
        filehash.LastAnalysisResults[newKey] = new AnalysisResult();
        StateHasChanged();
    }

    private void RemoveAnalysis(string key)
    {
        if (filehash.LastAnalysisResults.ContainsKey(key))
        {
            filehash.LastAnalysisResults.Remove(key);
            StateHasChanged();
        }
    }

    private async Task FileHashSubmit()
    {
        fileErrorMessage = null;
        fileSuccessMessage = null;

        if (filehash.Id != filehash.SHA1 && filehash.Id != filehash.SHA256 && filehash.Id != filehash.MD5)
        {
            fileErrorMessage = "There's incosistency within your FileID and File Hashes.";
            return;
        }
        try
        {
            await dbService.StoreHashReportAsync(filehash, name);
            fileSuccessMessage = "File report created!";

            filehash = new CustomFileHash();
            fileErrorMessage = null;
            fileSuccessMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            fileErrorMessage = ex.Message;
            return;
        }
    }
}
