@page "/urlanalysis"
@using URLAnalysis
@using _Analysis
@using ArgusFrontend.Services
@using System.Text.Json
@using System.Text.Json.Serialization
@rendermode InteractiveServer
@inject VirusTotalService VirusTotalService
@inject URL_DB_SRVC DBSrvc
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>URL Analysis</PageTitle>

<AuthorizeView>
	<Authorized>

		<div class="container">
            <h1 class="display-5 text-center">URL Analysis</h1>

            <div class="input-group mb-3">
                <span class="input-group-text">#</span>
                 <input type="text" class="form-control" placeholder="URL" @bind="url" /> 
            </div>

            <div class="btn-group" role="group">
                 <button type="submit" class="btn btn-dark btn-block" @onclick="GetReport">Scan</button>
                 <button type="submit" class="btn btn-secondary" @onclick="GetReportDB">Scan Locally</button> 
            </div>

            @if (report != null)
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h4 class="card-title">URL Analysis</h4>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Information</h5>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                Type: @(report?.Data?.Type ?? "N/A")
                            </li>
                            <li class="list-group-item">
                                AnalysisID: @(report?.Data?.Id ?? "N/A")
                            </li>
                        </ul>

                    </div>
                </div>
            }
            @if ( analysis != null)
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h4 class="card-title">Analysis</h4>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Information</h5>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                AnalysisID: @(analysis?.Data?.Id ?? "N/A")
                            </li>
                            <li class="list-group-item">
                                Type: @(analysis?.Data?.Type ?? "N/A")
                            </li>
                            <li class="list-group-item">
                                Status: @(analysis?.Data?.Attributes?.Status ?? "N/A")
                            </li>
                        </ul>

                        <hr class="mb-3">

                        <h5 class="card-title">Statistics</h5>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Malicious: @(analysis?.Data?.Attributes?.Stats?.Malicious ?? 0)</li>
                            <li class="list-group-item">Suspicious: @(analysis?.Data?.Attributes?.Stats?.Suspicious ?? 0)</li>
                            <li class="list-group-item">Harmless: @(analysis?.Data?.Attributes?.Stats?.Harmless ?? 0)</li>
                            <li class="list-group-item">Undetected: @(analysis?.Data?.Attributes?.Stats?.Undetected ?? 0)</li>
                        </ul>

                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning mt-3">
                    <p>No analysis available for the given URL. Please check the input or try again later.</p>
                </div>
            }
        </div>

	</Authorized>
    <NotAuthorized>
        <div class="container text-center mt-5">
            <div class="card shadow-sm mx-auto" style="max-width: 400px; border-radius: 10px;">
                <div class="card-body">
                    <h1 class="display-4 text-danger"><i class="bi bi-shield-lock"></i></h1>
                    <h2 class="card-title text-dark">Access Denied</h2>
                    <p class="card-text text-muted">
                        You aren't logged in. Please log in to access this page.
                    </p>
                    <a href="/login" class="btn btn-primary btn-lg mt-3">
                        <i class="bi bi-box-arrow-in-right"></i> Login Now
                    </a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private URLRep? report;
    private Analysis? analysis;
    private string? url;
    private string? analysisID;
    private string? name;

    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        name = user.Identity.Name;
    }

    private async Task GetReport()
    {
        if (string.IsNullOrWhiteSpace(url))
        {
            report = null;
            return;
        }
        report = await VirusTotalService.GetURLReport(url);
        if (report != null)
        {
            analysisID = report.Data.Id;
            analysis = await VirusTotalService.GetAnalysisAsync(analysisID);
            StateHasChanged();

            try
            {
                await DBSrvc.StoreURLReportAsync(report, analysis, name);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error storing form URL data: {ex.Message}");
            }
        }
    }

    private async Task GetReportDB()
    {
        if (string.IsNullOrWhiteSpace(url))
        {
            report = null;
            return;
        }
        try
        {
            report = await DBSrvc.GetURLReportAsync(url);
            if (report != null)
            {
                analysisID = report.Data.Id;
                analysis = await DBSrvc.GetAnalysisAsync(analysisID);
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching URL locally: {ex.Message}");
            report = null;
        }
    }

}
